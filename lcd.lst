


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: Jake Klovenski
    3 00000000         ; Last modification date: 3/29/2015
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000 40004100 
                       DC      EQU              0x40004100
   23 00000000 00000000 
                       DC_COMMAND
                               EQU              0
   24 00000000 00000040 
                       DC_DATA EQU              0x40
   25 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   26 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   27 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   28 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   29 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   30 00000000         
   31 00000000                 EXPORT           writecommand
   32 00000000                 EXPORT           writedata
   33 00000000         
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   35 00000000                 THUMB
   36 00000000                 ALIGN
   37 00000000         
   38 00000000         ; The Data/Command pin must be valid when the eighth bit
                        is
   39 00000000         ; sent.  The SSI module has hardware input and output FI



ARM Macro Assembler    Page 2 


                       FOs
   40 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat
   41 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   42 00000000         ; lot of data, the FIFOs are not used when writing
   43 00000000         ; commands, and they are used when writing data.  This
   44 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   45 00000000         ; that is actually being transmitted.
   46 00000000         ; The write command operation waits until all data has b
                       een
   47 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   48 00000000         ; the command, and then waits for the transmission to
   49 00000000         ; finish.
   50 00000000         ; The write data operation waits until there is room in 
                       the
   51 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   52 00000000         ; and then adds the data to the transmit FIFO.
   53 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   54 00000000         ; the SSI0 module is not initialized and enabled.
   55 00000000         
   56 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   57 00000000         ; Input: R0  8-bit command to transmit
   58 00000000         ; Output: none
   59 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   60 00000000         writecommand
   61 00000000         ;1) Read SSI0_SR_R and check bit 4, 
   62 00000000 4A10            LDR              R2, =SSI0_SR_R ;LOAD ADDRESS OF
                                                             SSI0_SR_R INTO R2
   63 00000002 6811            LDR              R1, [R2]    ;LOAD R1 WITH THE C
                                                            ONTENTS OF SSI0_SR_
                                                            R
   64 00000004 F001 0110       AND              R1, #SSI_SR_BSY ;AND R1 CONTENT
                                                            S OF SSI0_SR_R WITH
                                                             SSI_SR_BSY
   65 00000008         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   66 00000008 2910            CMP              R1, #SSI_SR_BSY ;COMPARE R1 WIT
                                                            H SSI_SR_BSY
   67 0000000A D0FE            BEQ              writecommand ;IF R1 IS THE SAME
                                                             AS SSI_SR_BSY LOOP
                                                             BACK TO STEP 1
   68 0000000C         ;3) Clear D/C=PA6 to zero
   69 0000000C 4A0E            LDR              R2, =DC     ;LOAD R2 WITH THE A
                                                            DDRESS OF DC
   70 0000000E 6811            LDR              R1, [R2]    ;LOAD R1 WITH THE C
                                                            ONTENTS OF DC
   71 00000010 F021 0140       BIC              R1, #DC_DATA ;CLEAR SHARED BITS
                                                             R1 SHARES WITH DC_
                                                            DATA
   72 00000014 6011            STR              R1, [R2]    ;STORE R1 AT THE DA
                                                            TA LOCATION DC
   73 00000016         ;4) Write the command to SSI0_DR_R



ARM Macro Assembler    Page 3 


   74 00000016 490D            LDR              R1, =SSI0_DR_R ;LOAD THE ADDRES
                                                            S OF SSI0_DR_R INTO
                                                             R1
   75 00000018 6008            STR              R0, [R1]    ;STORE COMMAND IN R
                                                            0 INTO SSI0_DR_R
   76 0000001A         ;5) Read SSI0_SR_R and check bit 4, 
   77 0000001A         stepfive
   78 0000001A 490A            LDR              R1, =SSI0_SR_R ;LOAD ADDRESS OF
                                                             SSI0_SR_R INTO R1
   79 0000001C 6808            LDR              R0, [R1]    ;LOAD R0 WITH THE C
                                                            ONTENTS OF SSI0_SR_
                                                            R
   80 0000001E F000 0010       AND              R0, #SSI_SR_BSY ;MASK FOR ONLY 
                                                            THE BUSY BIT
   81 00000022         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   82 00000022 2810            CMP              R0, #SSI_SR_BSY ;COMPARE R0 WIT
                                                            H SSI_SR_BSY
   83 00000024 D0F9            BEQ              stepfive    ;LOOP BACK TO BEGIN
                                                            NING OF STEP FIVE I
                                                            F BUSY BIT IS HIGH
   84 00000026         
   85 00000026 4770            BX               LR          ;   return
   86 00000028         
   87 00000028         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   88 00000028         ; Input: R0  8-bit data to transmit
   89 00000028         ; Output: none
   90 00000028         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   91 00000028         writedata
   92 00000028         ;1) Read SSI0_SR_R and check bit 1, 
   93 00000028 4A06            LDR              R2, =SSI0_SR_R ;LOAD R2 WITH TH
                                                            E ADDRESS OF SSI0_S
                                                            R_R
   94 0000002A 6811            LDR              R1, [R2]    ;LOAD CONTENTS OF S
                                                            SI0_SR_R INTO R1
   95 0000002C F001 0102       AND              R1, #SSI_SR_TNF ;MASK FOR SHARE
                                                            D BITS BETWEEN R1 A
                                                            ND SSI_SR_TNF
   96 00000030         ;2) If bit 1 is low loop back to step 1 (wait for TNF bi
                       t to be high)
   97 00000030 2902            CMP              R1, #SSI_SR_TNF ;COMPARE MASKED
                                                             VALUE OF SSI0_SR_R
                                                             WITH SSI_SR_TNF
   98 00000032 D1FE            BNE              writedata   ;IF BIT IS LOW LOOP
                                                             BACK TO STEP 1
   99 00000034         ;3) Set D/C=PA6 to one
  100 00000034 4A04            LDR              R2, =DC     ;LOAD R2 WITH THE A
                                                            DDRESS OF DC
  101 00000036 6811            LDR              R1, [R2]    ;LOAD CONTENTS OF D
                                                            C INTO R1
  102 00000038 F041 0140       ORR              R1, #DC_DATA ;ORR CONTENTS OF R
                                                            1 WITH DC_DATA
  103 0000003C 6011            STR              R1, [R2]    ;STORE ALTERED CONT
                                                            ENTS OF DC BACK INT
                                                            O DC
  104 0000003E         ;4) Write the 8-bit data to SSI0_DR_R
  105 0000003E 4903            LDR              R1, =SSI0_DR_R ;LOAD ADDRESS OF



ARM Macro Assembler    Page 4 


                                                             SSI0_DR_R INTO R1
  106 00000040 6008            STR              R0,[R1]     ;STORE DATA INTO SS
                                                            I0_DR_R
  107 00000042         
  108 00000042 4770            BX               LR          ;   return
  109 00000044         
  110 00000044         
  111 00000044         ;***************************************************
  112 00000044         ; This is a library for the Adafruit 1.8" SPI display.
  113 00000044         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  114 00000044         ; ----> http://www.adafruit.com/products/358
  115 00000044         ; as well as Adafruit raw 1.8" TFT display
  116 00000044         ; ----> http://www.adafruit.com/products/618
  117 00000044         ;
  118 00000044         ; Check out the links above for our tutorials and wiring
                        diagrams
  119 00000044         ; These displays use SPI to communicate, 4 or 5 pins are
                        required to
  120 00000044         ; interface (RST is optional)
  121 00000044         ; Adafruit invests time and resources providing this ope
                       n source code,
  122 00000044         ; please support Adafruit and open-source hardware by pu
                       rchasing
  123 00000044         ; products from Adafruit!
  124 00000044         ;
  125 00000044         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  126 00000044         ; MIT license, all text above must be included in any re
                       distribution
  127 00000044         ;****************************************************
  128 00000044         
  129 00000044                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  130 00000044                 END                          ; end of file
              4000800C 
              40004100 
              40008008 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\lcd.d 
-o.\lcd.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Luminary --predefine="__EVAL SETA 1" --list=.\lcd.lst LCD.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 34 in file LCD.s
   Uses
      None
Comment: .text unused
stepfive 0000001A

Symbol: stepfive
   Definitions
      At line 77 in file LCD.s
   Uses
      At line 83 in file LCD.s
Comment: stepfive used once
writecommand 00000000

Symbol: writecommand
   Definitions
      At line 60 in file LCD.s
   Uses
      At line 31 in file LCD.s
      At line 67 in file LCD.s

writedata 00000028

Symbol: writedata
   Definitions
      At line 91 in file LCD.s
   Uses
      At line 32 in file LCD.s
      At line 98 in file LCD.s

4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DC 40004100

Symbol: DC
   Definitions
      At line 22 in file LCD.s
   Uses
      At line 69 in file LCD.s
      At line 100 in file LCD.s

DC_COMMAND 00000000

Symbol: DC_COMMAND
   Definitions
      At line 23 in file LCD.s
   Uses
      None
Comment: DC_COMMAND unused
DC_DATA 00000040

Symbol: DC_DATA
   Definitions
      At line 24 in file LCD.s
   Uses
      At line 71 in file LCD.s
      At line 102 in file LCD.s

SSI0_DR_R 40008008

Symbol: SSI0_DR_R
   Definitions
      At line 25 in file LCD.s
   Uses
      At line 74 in file LCD.s
      At line 105 in file LCD.s

SSI0_SR_R 4000800C

Symbol: SSI0_SR_R
   Definitions
      At line 26 in file LCD.s
   Uses
      At line 62 in file LCD.s
      At line 78 in file LCD.s
      At line 93 in file LCD.s

SSI_SR_BSY 00000010

Symbol: SSI_SR_BSY
   Definitions
      At line 28 in file LCD.s
   Uses
      At line 64 in file LCD.s
      At line 66 in file LCD.s
      At line 80 in file LCD.s
      At line 82 in file LCD.s

SSI_SR_RNE 00000004

Symbol: SSI_SR_RNE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 27 in file LCD.s
   Uses
      None
Comment: SSI_SR_RNE unused
SSI_SR_TNF 00000002

Symbol: SSI_SR_TNF
   Definitions
      At line 29 in file LCD.s
   Uses
      At line 95 in file LCD.s
      At line 97 in file LCD.s

8 symbols
345 symbols in table
